// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  events        Event[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.Text
  excerpt     String?   @db.Text
  featured    Boolean   @default(false)
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  image       String?
  comments    Comment[]

  @@index([authorId])
  @@index([categoryId])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}
model Program {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String   @db.Text
  content     String   @db.Text
  image       String?
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  category    ProgramCategory @relation(fields: [categoryId], references: [id])

  donations   Donation[] @relation("ProgramDonations") // The relation name here must match in Donation model
  images      ProgramImage[]

  @@index([categoryId])
}

model ProgramCategory {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  programs    Program[]
}

model ProgramImage {
  id          String   @id @default(cuid())
  programId   String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
}

model AboutUs {
  id        Int     @id @default(autoincrement())
  mission   String
  vision    String
  history   String
  values    Json
  team      Json
  impact    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AboutSection {
  id        Int     @id @default(autoincrement())
  title     String
  subtitle  String?
  content   String
  image     String?
  order     Int
  type      String  // mission, vision, history, team, etc.
  active    Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id          Int     @id @default(autoincrement())
  name        String
  position    String
  bio         String
  image       String?
  socialLinks Json?
  order       Int
  active      Boolean @default(true)
  parentId    Int?    // Reference to parent team member for hierarchy
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Donation {
  id            String         @id @default(cuid())
  amount        Float
  currency      String         @default("USD")
  status        PaymentStatus  @default(PENDING)
  type          DonationType   @default(ONE_TIME)
  name          String?
  email         String?
  message       String?        @db.Text
  transactionId String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  programId     String?
  program       Program?       @relation("ProgramDonations", fields: [programId], references: [id]) // Match the relation name here

  @@index([programId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String    @db.Text
  content     String    @db.Text
  location    String?
  startDate   DateTime
  endDate     DateTime?
  image       String?
  featured    Boolean   @default(false)
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  organizerId String
  organizer   User      @relation(fields: [organizerId], references: [id])
  attendees   Attendee[]

  @@index([organizerId])
}

model Attendee {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  status    AttendeeStatus @default(REGISTERED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model Volunteer {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  skills      String?  @db.Text
  availability String?
  motivation  String?  @db.Text
  status      VolunteerStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String   @db.Text
  status    ContactStatus @default(UNREAD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteSettings {
  id                String   @id @default(cuid())
  siteName          String   @default("IWLAG")
  siteDescription   String   @default("Empowering women through education and support")
  contactEmail      String   @default("contact@empowertogether.org")
  maintenanceMode   Boolean  @default(false)
  backupFrequency   String   @default("weekly")
  cacheLifetime     Int      @default(3600)
  debugMode         Boolean  @default(false)
  emailNotifications Boolean  @default(true)
  donationAlerts    Boolean  @default(true)
  volunteerAlerts   Boolean  @default(true)
  contactFormAlerts Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model BlogSettings {
  id                  String   @id @default(cuid())
  postsPerPage        Int      @default(10)
  allowComments       Boolean  @default(true)
  moderateComments    Boolean  @default(true)
  featuredPostsCount  Int      @default(3)
  showRelatedPosts    Boolean  @default(true)
  showAuthorInfo      Boolean  @default(true)
  defaultCategory     String?
  seoTitle            String   @default("Blog | IWLAG")
  seoDescription      String   @default("Latest news, stories, and updates from IWLAG")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Comment {
  id        String        @id @default(cuid())
  content   String        @db.Text
  name      String
  email     String
  website   String?
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?      @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Comment[]     @relation("CommentToComment")

  @@index([postId])
  @@index([parentId])
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DonationType {
  ONE_TIME
  MONTHLY
  ANNUAL
}

enum AttendeeStatus {
  REGISTERED
  CONFIRMED
  CANCELLED
  ATTENDED
}

enum VolunteerStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum ContactStatus {
  UNREAD
  READ
  REPLIED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}
